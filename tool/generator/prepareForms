#!/usr/bin/env node
var  program = require('commander')
	,fs = require('fs')
	,path = require('path')
	,forms = require(__dirname+'/../libs/form')
	,validators =require(__dirname+'/../libs/validators')
	,async = require('async')
	,util = require('util')
	;
//console.log(forms.toString())
var _model;
var _modelFile;
var _formDir;
var _middlewareDir;
var _patches;

program
  .version('0.0.2')
  .option('-m, --parsed_model [name]', 'Set model')
  .option('-p, --path [path]','Set custom model path', path.normalize('../../app/model'))
  .option('-f, --force','Force parser to rewrite exists file')
  .option('-r, --revision','Set forms revision','0.0.1')
  .parse(process.argv);

  if(!program.parsed_model) {
	console.error('Error: Provide model, for more information run script with --help argument.')
	process.exit();
}
_path = path.normalize(program.path);

if(program.parsed_model.match('/.js$/'))
	_modelFile = _path+'/'+program.parsed_model.replace('/.js$/','')+'.parsed';
else
	_modelFile = _path+'/'+program.parsed_model+'.parsed';

_model = require(_modelFile);

_formDir = path.normalize(__dirname+'/../../app/resources/form/'+program.parsed_model)
if(!fs.existsSync(_formDir)) {
	fs.mkdirSync(_formDir)
}
_middlewareDir = path.normalize(__dirname+'/../../app/resources/middleware/'+program.parsed_model);

if(!fs.existsSync(_middlewareDir)) {
	fs.mkdirSync(_middlewareDir)
}

var i,actions = Object.getOwnPropertyNames(_model.form.actions);


var _form_tmpl = [
	 '//-\n'
	,'//- Prepared form for model: `#model#`, action: `#action#`\n'
	,'//- @revision #revision#\n'
	,'//- @parser_version #parser_version#\n'
	,'//- @generated #iso#\n'
	,''
	,'#form#'
	,'\n//-'
];
var _form_replaces = {
	 'model' : program.parsed_model
	,'revision': program.revision
	,'parser_version': program._version
	,'iso' : new Date().toISOString()
};

var _middleware_tmpl = fs.readFileSync(__dirname+'/templates/middleware_post.js').toString();

var _middleware_replaces = {
	 'model' : program.parsed_model
	,'revision': program.revision
	,'parser_version': program._version
	,'iso' : new Date().toISOString()
};
	


for (i =0;i< actions.length;i++) {
	var prop =actions[i];
	var item =_model.form.actions[prop]; 
	
	/*(function(action){createForm(prop,item,function(data){
		var tmp = [];
		tmp.push('mixin form_'+action+'()')
		tmp.push('\n\t-'+action+'= '+action+' || {}')
		tmp.push('\n\t-'+action+'.errors ='+action+'.errors || {}')
		tmp.push('\n\t-'+action+'.val ='+action+'.val || {}')
		tmp.push('\n\t'+data.replace(/\n/g,'\n\t'));
		tmp = tmp.join('')

		var tpl = new String(_form_tmpl.join(''));
		Object.keys(_form_replaces).forEach(function(i){
			tpl = tpl.replace('#'+i+'#',_form_replaces[i])
		})
		tpl = tpl.replace('#action#',action);
		tpl = tpl.replace('#form#',tmp)
		fs.writeFileSync(_formDir+'/'+action+'.jade',tpl)
		console.log('Form for action `'+action+'` done.');
	})
	}(prop));*/
	//console.log(item.type)
	(function(action){
		createFormValidators(action,item)
	}(prop))
}





function createForm(name,data,cb) {
	var f = [];
	var action = name;
	var type = data.type;
	var fields = data.fields;
	var i;
	for(i =0; i < fields.length; i++) {
		var item = fields[i];
		var field = _model.form.schema[item];
		if(typeof field.type == 'undefined') {
			Object.keys(field).forEach(function(j){
				f.push(createField.bind(createField,name,item+'['+j+']',field[j]))
			})
			
		} else {
			f.push(createField.bind(createField,name,item,field))
		}
	}
	async.parallel(f,function(err,data){
		cb(data.join('\n'));

	})
}

function createField(action,name,data,callback) {
	var i = new forms[data.type](action,{
		id: name,
		type : data.type,
		label: name
	})
	if(data.options) {
		data.options.forEach(function(r){
			i.options[r] =r;
		})
	}
	if(data.required) {
		i.opts.required=1
	}
	switch(data.type) {
		case 'number':
			if(Array.isArray(data.validators)) {
				data.validators.forEach(function(j){
					if(Array.isArray(j)) {
						if(typeof j[0] == 'string') {
							if(j[0] == 'min')
								i.opts.min = j[2]
							if(j[0] == 'max')
								i.opts.max = j[2]
						}
					}
				})
			}
		break;

		default:
		break;
	}
	//console.log(data)
	i.toJade(function(err,jade){
		if(err)
			console.log(err);
		callback(false,jade);
		return;
	});
}

function createFormValidators(action,actionData) {
	var vals ={};
	var i;
	for(i =0; i < actionData.fields.length; i++) {
		var item = actionData.fields[i];
		var field = _model.form.schema[item]
		//console.log(field.validators)
		if(typeof field.type == 'undefined') {
		Object.keys(field).forEach(function(j){
				if(typeof vals[item] == 'undefined') {
					vals[item] = {};
				}
				vals[item][j]  = [];
				if(field[j].required === true) {
					vals[item][j].push('validators.required()');
				}

				if(field[j].type == 'email')
					vals[item][j].push('validators.email()')
				if(field[j].type == 'select')
					vals[item][j].push('validators.inArray(false,["'+field[j].options.join('","')+'"])')
				if(field[j].type == 'number')
					vals[item][j].push('validators.number()')

				createValidator(field[j],item+'_'+j,action).forEach(function(q){
					vals[item][j].push(q)
				})


			})
		} else {
			vals[item] = [];
 			//vals[item]=createValidator(field,item,action)
			if(field.required === true) {
				vals[item].push('validators.required()');
			}
			if(field.type == 'email')
				vals[item].push('validators.email()')
			if(field.type == 'select')
				//console.log(field.options.join('\',\''))
				vals[item].push('validators.inArray(false,["'+field.options.join('","')+'"])')
			if(field.type == 'number')
				vals[item].push('validators.number()')

			createValidator(field,item,action).forEach(function(q){
				vals[item].push(q)
			})

		}

	}
	var validators = [];
	var validators = util.inspect(vals,{ showHidden: false, depth: null }).replace(/\[\x20\'/g,'[').replace(/\'\x20\]/g,']')
		.replace(/\'\,(\x20)*\n(\t|\x20)*\'/g,',')
		//.replace(/\n/g,'\n\t')
	;
	console.log(validators)
	var tpl = new String (_middleware_tmpl);
	Object.keys(_middleware_replaces).forEach(function(i){
		tpl = tpl.replace('#'+i+'#',_middleware_replaces[i])
	})
	tpl = tpl.replace('#validators#',validators).replace(/#action#/g,action)
	console.log(tpl)
	fs.writeFileSync(_middlewareDir+'/'+action+'_POST.js',tpl)
}

function createValidator(field,fieldname,action) {
	var vals = [];
	//console.log(field)
	if(Array.isArray(field.validators)) {
		var j =0;
		field.validators.forEach(function(i){
			j++
			if(i[0].match(/^function/)) {
				var validator = validators.callback(i[0],i[1])
				fs.writeFileSync(_middlewareDir+'/'+action+'_'+fieldname+'_'+j+'.js',validator)
				vals.push('require(__dirname+"/'+action+'_'+fieldname+'_'+j+'.js")');
				
			} else if(typeof validators[i[0]] == 'function') {
				if(i[1] === false)
					vals.push('validators.'+[i[0]]+'('+i[1]+','+i[2]+')')
				else
					vals.push('validators.'+[i[0]]+'("'+i[1]+'",'+i[2]+')')

			}
		})
	}
	return vals;
	//console.log(vals)	
}



